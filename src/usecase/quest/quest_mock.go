// Code generated by MockGen. DO NOT EDIT.
// Source: quest.go

// Package mock_quest is a generated GoMock package.
package quest

import (
	reflect "reflect"

	quest "github.com/arfaghifari/guild-board/src/model/quest"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateQuest mocks base method.
func (m *MockUsecase) CreateQuest(arg0 quest.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuest indicates an expected call of CreateQuest.
func (mr *MockUsecaseMockRecorder) CreateQuest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuest", reflect.TypeOf((*MockUsecase)(nil).CreateQuest), arg0)
}

// DeleteQuest mocks base method.
func (m *MockUsecase) DeleteQuest(arg0 quest.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuest indicates an expected call of DeleteQuest.
func (mr *MockUsecaseMockRecorder) DeleteQuest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuest", reflect.TypeOf((*MockUsecase)(nil).DeleteQuest), arg0)
}

// GetQuestByStatus mocks base method.
func (m *MockUsecase) GetQuestByStatus(arg0 int32) ([]quest.GetQuestByStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestByStatus", arg0)
	ret0, _ := ret[0].([]quest.GetQuestByStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestByStatus indicates an expected call of GetQuestByStatus.
func (mr *MockUsecaseMockRecorder) GetQuestByStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestByStatus", reflect.TypeOf((*MockUsecase)(nil).GetQuestByStatus), arg0)
}

// ReportQuest mocks base method.
func (m *MockUsecase) ReportQuest(arg0, arg1 int64, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportQuest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportQuest indicates an expected call of ReportQuest.
func (mr *MockUsecaseMockRecorder) ReportQuest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportQuest", reflect.TypeOf((*MockUsecase)(nil).ReportQuest), arg0, arg1, arg2)
}

// TakeQuest mocks base method.
func (m *MockUsecase) TakeQuest(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeQuest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeQuest indicates an expected call of TakeQuest.
func (mr *MockUsecaseMockRecorder) TakeQuest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeQuest", reflect.TypeOf((*MockUsecase)(nil).TakeQuest), arg0, arg1)
}

// UpdateQuestRank mocks base method.
func (m *MockUsecase) UpdateQuestRank(arg0 quest.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestRank", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestRank indicates an expected call of UpdateQuestRank.
func (mr *MockUsecaseMockRecorder) UpdateQuestRank(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestRank", reflect.TypeOf((*MockUsecase)(nil).UpdateQuestRank), arg0)
}

// UpdateQuestReward mocks base method.
func (m *MockUsecase) UpdateQuestReward(arg0 quest.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestReward", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestReward indicates an expected call of UpdateQuestReward.
func (mr *MockUsecaseMockRecorder) UpdateQuestReward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestReward", reflect.TypeOf((*MockUsecase)(nil).UpdateQuestReward), arg0)
}
