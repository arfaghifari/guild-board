// Code generated by MockGen. DO NOT EDIT.
// Source: quest.go

// Package mock_quest is a generated GoMock package.
package quest

import (
	reflect "reflect"

	quest "github.com/arfaghifari/guild-board/src/model/quest"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// CreateQuest mocks base method.
func (m *MockRepository) CreateQuest(arg0 quest.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuest indicates an expected call of CreateQuest.
func (mr *MockRepositoryMockRecorder) CreateQuest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuest", reflect.TypeOf((*MockRepository)(nil).CreateQuest), arg0)
}

// CreateTakenBy mocks base method.
func (m *MockRepository) CreateTakenBy(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTakenBy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTakenBy indicates an expected call of CreateTakenBy.
func (mr *MockRepositoryMockRecorder) CreateTakenBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTakenBy", reflect.TypeOf((*MockRepository)(nil).CreateTakenBy), arg0, arg1)
}

// DeleteQuest mocks base method.
func (m *MockRepository) DeleteQuest(arg0 quest.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuest indicates an expected call of DeleteQuest.
func (mr *MockRepositoryMockRecorder) DeleteQuest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuest", reflect.TypeOf((*MockRepository)(nil).DeleteQuest), arg0)
}

// GetAllAvailableQuest mocks base method.
func (m *MockRepository) GetAllAvailableQuest() ([]quest.GetQuestByStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAvailableQuest")
	ret0, _ := ret[0].([]quest.GetQuestByStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAvailableQuest indicates an expected call of GetAllAvailableQuest.
func (mr *MockRepositoryMockRecorder) GetAllAvailableQuest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAvailableQuest", reflect.TypeOf((*MockRepository)(nil).GetAllAvailableQuest))
}

// GetAllCompletedQuest mocks base method.
func (m *MockRepository) GetAllCompletedQuest() ([]quest.GetQuestByStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompletedQuest")
	ret0, _ := ret[0].([]quest.GetQuestByStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCompletedQuest indicates an expected call of GetAllCompletedQuest.
func (mr *MockRepositoryMockRecorder) GetAllCompletedQuest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompletedQuest", reflect.TypeOf((*MockRepository)(nil).GetAllCompletedQuest))
}

// GetQuest mocks base method.
func (m *MockRepository) GetQuest(arg0 int64) (quest.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuest", arg0)
	ret0, _ := ret[0].(quest.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuest indicates an expected call of GetQuest.
func (mr *MockRepositoryMockRecorder) GetQuest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuest", reflect.TypeOf((*MockRepository)(nil).GetQuest), arg0)
}

// UpdateQuestRank mocks base method.
func (m *MockRepository) UpdateQuestRank(arg0 quest.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestRank", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestRank indicates an expected call of UpdateQuestRank.
func (mr *MockRepositoryMockRecorder) UpdateQuestRank(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestRank", reflect.TypeOf((*MockRepository)(nil).UpdateQuestRank), arg0)
}

// UpdateQuestReward mocks base method.
func (m *MockRepository) UpdateQuestReward(arg0 quest.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestReward", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestReward indicates an expected call of UpdateQuestReward.
func (mr *MockRepositoryMockRecorder) UpdateQuestReward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestReward", reflect.TypeOf((*MockRepository)(nil).UpdateQuestReward), arg0)
}

// UpdateQuestStatus mocks base method.
func (m *MockRepository) UpdateQuestStatus(arg0 quest.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestStatus indicates an expected call of UpdateQuestStatus.
func (mr *MockRepositoryMockRecorder) UpdateQuestStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestStatus", reflect.TypeOf((*MockRepository)(nil).UpdateQuestStatus), arg0)
}